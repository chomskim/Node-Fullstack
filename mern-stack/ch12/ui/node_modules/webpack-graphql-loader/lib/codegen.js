"use strict";
exports.__esModule = true;
var legacyIR_1 = require("apollo-codegen/lib/compiler/legacyIR");
var typescript_1 = require("apollo-codegen/lib/typescript");
/**
 * Generate typescript types for the schema and document specified.
 * @returns [string, string] Returns code generation for webpack
 * and for a declaration file. The former should be injected by the loader
 * during compilation and the latter can be emitted to a d.ts file
 * for IDE help.
 */
function codegen(schema, document) {
    var context = legacyIR_1.compileToLegacyIR(schema, document);
    context.options = {
        passthroughCustomScalars: true,
        customScalarsPrefix: "gql_"
    };
    var types = typescript_1.generateSource(context);
    var operationDef = document.definitions.find(function (def) { return def.kind === "OperationDefinition"; });
    if (!operationDef) {
        return [types, types.replace(/;/g, "")];
    }
    var operationKind = operationDef.operation;
    if (!operationDef.name) {
        throw new Error("cannot generate types for operation without name");
    }
    var operationName = operationDef.name.value;
    var resultType = "" + operationName + operationKind
        .charAt(0)
        .toUpperCase() + operationKind.substring(1);
    var inputType = "never";
    if (operationDef.variableDefinitions &&
        operationDef.variableDefinitions.length > 0) {
        inputType = resultType + "Variables";
    }
    var webpackOutput = "\nconst spec: Spec<" + resultType + ", " + inputType + "> = {\n  query: documentOutput,\n};\n";
    var declarationOutput = "\ndeclare const Dummy: Spec<" + resultType + ", " + inputType + ">;\nexport default Dummy;\n";
    var specType = "\nexport interface Spec<Result extends object, Input extends object> {\n  query: string;\n  result?: Result;\n  variables?: Input;\n}\n";
    return [
        "" + types + specType + webpackOutput,
        // Remove semicolons, since declaration files do not allow "statements" in
        // ambient declarations.
        ("" + types + specType + declarationOutput).replace(/;/g, ""),
    ];
}
exports["default"] = codegen;
//# sourceMappingURL=codegen.js.map